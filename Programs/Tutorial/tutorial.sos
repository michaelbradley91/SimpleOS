/*
 * A tutorial program to outline how Simple OS works!
 */

#include "memory_map.sos"
#include "assets.sos"
#include "keys.sos"

#constant VSCODE_EXTENSION_TICKS 14000
#constant HELLO_WORLD_FOLDER_TICKS 40000
#constant HELLO_WORLD_CONFIGURATION_TICKS 43000
#constant HELLO_WORLD_VSCODE_CONFIGURATION_TICKS 57000
#constant HELLO_WORLD_CODE_TICKS 73000
#constant HELLO_WORLD_COMPILE_COMMAND_TICKS 98000
#constant HELLO_WORLD_RUNNING_TICKS 121000
#constant TUTORIAL_TALK_ENDED_TICKS 144000

// When to play slides during the tutorial
store VSCODE_EXTENSION_TICKS_ADDRESS VSCODE_EXTENSION_TICKS
store HELLO_WORLD_FOLDER_TICKS_ADDRESS HELLO_WORLD_FOLDER_TICKS
store HELLO_WORLD_CONFIGURATION_TICKS_ADDRESS HELLO_WORLD_CONFIGURATION_TICKS
store HELLO_WORLD_VSCODE_CONFIGURATION_TICKS_ADDRESS HELLO_WORLD_VSCODE_CONFIGURATION_TICKS
store HELLO_WORLD_CODE_TICKS_ADDRESS HELLO_WORLD_CODE_TICKS
store HELLO_WORLD_COMPILE_COMMAND_TICKS_ADDRESS HELLO_WORLD_COMPILE_COMMAND_TICKS
store HELLO_WORLD_RUNNING_TICKS_ADDRESS HELLO_WORLD_RUNNING_TICKS
store TUTORIAL_TALK_ENDED_ADDRESS TUTORIAL_TALK_ENDED_TICKS

#template_begin CHECK_QUIT()
eq EVENT_ADDRESS KEY_Q_PRESSED
JUMP_ON_CONDITION(RETURN, end:)
eq EVENT_ADDRESS KEY_Q_PRESSED
JUMP_ON_CONDITION(RETURN, end:)
#template_end

// Load into memory a lot of the literal values we need
store MAX_MILLISECONDS 10000

INIT_MEMORY()
LOAD_ASSETS()

// Start the audio
play_music BACKGROUND_MUSIC_VOLUME BACKGROUND_MUSIC

begin:
draw SCREEN_RECT TUTORIAL_START

// We play it for a while and then exit
loop:
wait
STORE_EVENT()
eq EVENT_ADDRESS KEY_P_PRESSED
JUMP_ON_CONDITION(RETURN, start:)
CHECK_QUIT()
JUMP(loop:)

start:
play_sound TUTORIAL_TALK_VOLUME TUTORIAL_TALK
get_ticks
copy PLAY_START_TICKS RETURN
copy TUTORIAL_PLAY_IMAGE TUTORIAL_BEGIN

start_loop:
wait
draw SCREEN_RECT TUTORIAL_PLAY_IMAGE
STORE_EVENT()
CHECK_QUIT()

// How long has the tutorial voice over been playing?
get_ticks
sub RETURN PLAY_START_TICKS
copy TICKS_ADDRESS RETURN

// Draw the right slide
lte TICKS_ADDRESS VSCODE_EXTENSION_TICKS_ADDRESS
JUMP_ON_CONDITION(RETURN, start_loop:)
copy TUTORIAL_PLAY_IMAGE TUTORIAL_HELLO_WORLD_VSCODE_EXTENSION

lte TICKS_ADDRESS HELLO_WORLD_FOLDER_TICKS_ADDRESS
JUMP_ON_CONDITION(RETURN, start_loop:)
copy TUTORIAL_PLAY_IMAGE TUTORIAL_HELLO_WORLD_FOLDER

lte TICKS_ADDRESS HELLO_WORLD_CONFIGURATION_TICKS_ADDRESS
JUMP_ON_CONDITION(RETURN, start_loop:)
copy TUTORIAL_PLAY_IMAGE TUTORIAL_HELLO_WORLD_CONFIGURATION

lte TICKS_ADDRESS HELLO_WORLD_VSCODE_CONFIGURATION_TICKS_ADDRESS
JUMP_ON_CONDITION(RETURN, start_loop:)
copy TUTORIAL_PLAY_IMAGE TUTORIAL_HELLO_WORLD_VSCODE_CONFIGURATION

lte TICKS_ADDRESS HELLO_WORLD_CODE_TICKS_ADDRESS
JUMP_ON_CONDITION(RETURN, start_loop:)
copy TUTORIAL_PLAY_IMAGE TUTORIAL_HELLO_WORLD_CODE

lte TICKS_ADDRESS HELLO_WORLD_COMPILE_COMMAND_TICKS_ADDRESS
JUMP_ON_CONDITION(RETURN, start_loop:)
copy TUTORIAL_PLAY_IMAGE TUTORIAL_COMPILE_COMMAND

lte TICKS_ADDRESS HELLO_WORLD_RUNNING_TICKS_ADDRESS
JUMP_ON_CONDITION(RETURN, start_loop:)
copy TUTORIAL_PLAY_IMAGE TUTORIAL_HELLO_WORLD_RUNNING

lte TICKS_ADDRESS TUTORIAL_TALK_ENDED_ADDRESS
JUMP_ON_CONDITION(RETURN, start_loop:)
copy TUTORIAL_PLAY_IMAGE TUTORIAL_START

JUMP(begin:)

end:
exit
